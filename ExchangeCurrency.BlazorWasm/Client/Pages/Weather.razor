@page "/Weather"
@using Model
@inject NavigationManager NavigationManager

<MudText Align="Align.Center" Typo="Typo.h3">Weather Conversor</MudText>


<MudPaper Elevation="1" Class="d-flex flex-row flex-wrap justify-content-around" Width="100%">
    <MudPaper Width="30%">
        <MudText Align="Align.Center" Color="Color.Primary" Typo="Typo.subtitle1">Write, click and Convert</MudText>
        <MudTextField T="string" Label="C°" OnBlur="@(()=>baseToCalculate('C'))" TextChanged="ValidateInput" @bind-Value="weatherConversor.GradeC" />
        <MudTextField T="string" Label="F°" OnBlur="@(()=>baseToCalculate('F'))" TextChanged="ValidateInput" @bind-Value="weatherConversor.GradeF" />
        <MudTextField T="string" Label="K°" OnBlur="@(()=>baseToCalculate('K'))" TextChanged="ValidateInput" @bind-Value="weatherConversor.GradeK" />
    </MudPaper>
    <MudPaper Elevation="1" Class="align-self-center">
        <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowForward" Disabled="@(!success)" OnClick="CalculateConversion"> Convert</MudButton>
    </MudPaper>
    <MudPaper Elevation="1" Width="30%;">
        <MudField>C°: @results[0]</MudField>
        <MudField>F°: @results[1]</MudField>
        <MudField>K°: @results[2]</MudField>
    </MudPaper>
</MudPaper>

@if (Errors!=string.Empty)
{
    <MudText Align="Align.Center" Color="Color.Error" Typo="Typo.h5">
        @Errors
    </MudText>
}
<MudDivider />

@if (!string.IsNullOrEmpty(results[0])){
    if (double.Parse(results[0]) >= 10 && double.Parse(results[0])<10.1)
    {
        <MudImage Height="200" Width="400" Src="img/cold.jpg" Alt="It's cold'" Elevation="25" Class="rounded-lg" />
    }
    if (double.Parse(results[0]) >= 10.1 && double.Parse(results[0])<=30)
    {
        <MudImage Height="200" Width="400" Src="img/sunny.png" Alt="It's good'" Elevation="25" Class="rounded-lg" />
    }
    if (double.Parse(results[0]) >= 30.1)
    {
        <MudImage Height="200" Width="400" Src="img/derretir.png" Alt="It's good'" Elevation="25" Class="rounded-lg" />
    }
}


@code {
    char base2Calculate;
    string Errors=string.Empty;
    bool success;
    WeatherConversor weatherConversor = new WeatherConversor();

    string[] results = new string[3];

    private void baseToCalculate(char letter)
    {
        base2Calculate = letter;
        switch (letter)
        {
            case 'C':
                weatherConversor.GradeF = string.Empty;
                weatherConversor.GradeK = string.Empty;
                break;
            case 'F':
                weatherConversor.GradeC = string.Empty;
                weatherConversor.GradeK = string.Empty;
                break;
            case 'K':
                weatherConversor.GradeC = string.Empty;
                weatherConversor.GradeF = string.Empty;
                break;
        }
    }

    private void ValidateInput(){
        bool result = false;
        double value=0;
        switch (base2Calculate)
        {
            case 'C':
                result = double.TryParse(weatherConversor.GradeC, out value);
                break;
            case 'F':
                result = double.TryParse(weatherConversor.GradeF, out value);
                break;
            case 'K':
                result = double.TryParse(weatherConversor.GradeK, out value);
                break;
        }

        success = result;

        Errors = success ? string.Empty : "Please write valid numbers";
    }

    private void CalculateConversion()
    {
        double givenValue = 0;
        switch (base2Calculate)
        {
            case 'C':
                double.TryParse(weatherConversor.GradeC, out givenValue);
                results[0] = givenValue.ToString();
                results[1] = (((givenValue * 9) / 5) + 32).ToString();
                results[2] = (givenValue + 273.15).ToString();
                break;
            case 'F':
                double.TryParse(weatherConversor.GradeF, out givenValue);
                results[0] = (((givenValue-32)*5)/9).ToString();
                results[1] = givenValue.ToString();
                results[2] = ((((givenValue - 32) * 5) / 9) + 273.15).ToString();
                break;
            case 'K':
                double.TryParse(weatherConversor.GradeK, out givenValue);
                results[0] = (givenValue - 273.15).ToString();
                results[1] = ((((givenValue - 273.15) * 9) / 5) + 32).ToString();
                results[2] = givenValue.ToString();
                break;
        } 
    }
}
